<div class="main-bg">
    <div class="overlay-container">
        <h3 class="center poppins-regular">
            Air Pollution Monitoring System untuk memonitoring kadar karbon monoksida, Polutan PM25, Suhu, Kelembaban serta digunakan sebagai prediksi kadar karbon monoksida dan polutan PM25
        </h3>
    </div>
    <a href="#container" class="bottom-center poppins-regular link-1">Cek Polusi Saat ini</a>
</div>
<br>
<div class="container bg-second">
    <h3 class="header poppins-semibold" id="lastUpdatedTime"></h3>
    <hr class="mt-0 border border-success border-2 opacity-75">
    <br>
    <!-- Kotak informasi nilai terakhir -->
    <div class="container" id="container">
        <div class="row justify-content-center">
            <div class="col-12 col-md-5 info-box mb-3 mb-md-0" id="coBox">
                <p class="center">CO</p>
                <div class="d-flex justify-content-center align-items-center">
                    <h3 id="coValue"></h3>
                    <p class="value-label">ppm</p>
                </div>
                <p id="coDescription" class="center poppins-regular"></p>
            </div>
            <div class="col-12 col-md-5 info-box mb-3 mb-md-0" id="pm25Box">
                <p class="center">PM25</p>
                <div class="d-flex justify-content-center align-items-center">
                    <h3 id="pm25Value"></h3>
                    <p class="value-label">ppm</p>
                </div>
                <p id="pm25Description" class="center poppins-regular m-1"></p>
            </div>
        </div>
        <div class="row justify-content-center mt-3">
            <div class="col-12 col-md-5 info-box mb-3 mb-md-0">
                <p class="center">Temperature</p>
                <div class="d-flex justify-content-center align-items-center">
                    <h3 id="tempValue"></h3>
                    <p class="value-label">°C</p>
                </div>
            </div>
            <div class="col-12 col-md-5 info-box mb-3 mb-md-0">
                <p class="center">Humidity</p>
                <div class="d-flex justify-content-center align-items-center">
                    <h3 id="humValue"></h3>
                    <p class="value-label">%</p>
                </div>
            </div>
        </div>
        <div class="text-center mt-5">
            <a class="btn btn-outline-success me-2" href="/prediction">View Prediction</a>
        </div>
    </div>
    <br>
    
    <div class="header justify-content-center">
        <h3 class="poppins-regular">
            Grafik terhitung dalam setiap menit
        </h3>
        <hr class="mt-0 border border-primary border-2 opacity-50">
    </div>
    <br>

    <div class="d-flex justify-content-center mb-4"><!--main chart-->
        <canvas id="myChart1" class="chart-container"></canvas>  
    </div>
    <div class="d-flex justify-content-center mb-4"><!--chart CO-->
        <canvas id="myChart2" class="chart-container"></canvas>  
    </div>
    <div class="d-flex justify-content-center mb-4"><!--chart PM25-->
        <canvas id="myChart3" class="chart-container"></canvas>  
    </div>
    <div class="d-flex justify-content-center mb-4"><!--chart Temperature-->
        <canvas id="myChart4" class="chart-container"></canvas>  
    </div>
    <div class="d-flex justify-content-center mb-4"><!--chart Humidity-->
        <canvas id="myChart5" class="chart-container"></canvas>  
    </div>
</div>
    <!--indikator js berisikan pemformatan waktu serta pemberian indikator level CO dan PM25-->
    <script src="/js/indikator.js"></script>
    <script>
        var myChart1, myChart2, myChart3, myChart4, myChart5;

        async function fetchData() {
            try {
                const response = await fetch(`/data`);
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }

        async function updateChart() {
            const data = await fetchData();
            if (data) {
                //format waktu dari label menjadi hours:minutes WIB
                var labels = data.feeds.map(feed => formatTime(feed.created_at));
                //Ambil atribut waktu dari data terakhir
                var lastLabels = data.feeds[data.feeds.length - 1].created_at;
                var values1 = data.feeds.map(feed => feed.field1);
                var values2 = data.feeds.map(feed => feed.field2);
                var values3 = data.feeds.map(feed => feed.field3);
                var values4 = data.feeds.map(feed => feed.field4);
                

                document.getElementById('coValue').innerText = values1[values1.length - 1];
                document.getElementById('pm25Value').innerText = values2[values2.length - 1];
                document.getElementById('tempValue').innerText = values3[values3.length - 1];
                document.getElementById('humValue').innerText = values4[values4.length - 1];
                var lastUpdatedTime = formatDateTime(lastLabels);
                document.getElementById('lastUpdatedTime').innerText = lastUpdatedTime;

                updateCOBox(values1[values1.length - 1]);
                updatePM25Box(values2[values2.length - 1]);

                updateSingleChart('myChart1', labels, 'CO', values1, 'rgba(75, 192, 192, 0.2)', 'rgba(75, 192, 192, 1)', myChart1, lastLabels, 'ppm');
                updateSingleChart('myChart2', labels, 'PM25', values2, 'rgba(192, 75, 75, 0.2)', 'rgba(192, 75, 75, 1)', myChart2, lastLabels, 'ppm');
                updateSingleChart('myChart3', labels, 'Temperature', values3, 'rgba(75, 75, 192, 0.2)', 'rgba(75, 75, 192, 1)', myChart3, lastLabels, '°C');
                updateSingleChart('myChart4', labels, 'Humidity', values4, 'rgba(75, 192, 75, 0.2)', 'rgba(75, 192, 75, 1)', myChart4, lastLabels, '%');
                updateSingleChart('myChart5', labels, 'WindSpeed', values5, 'rgba(192, 192, 75, 0.2)', 'rgba(192, 192, 75, 1)', myChart5, lastLabels, 'm/s');
            }
        }

        function formatTime(dateString) {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return 'Invalid Date';
            }
            return date.toLocaleTimeString('id-ID', { hour: '2-digit', minute: '2-digit' }) + ' WIB';
        }

        function updateSingleChart(canvasId, labels, label, data, backgroundColor, borderColor, chartInstance, lastLabels, ylabels) {
            var ctx = document.getElementById(canvasId).getContext('2d');
            if (!chartInstance) {
                chartInstance = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: label,
                            data: data,
                            backgroundColor: backgroundColor,
                            borderColor: borderColor,
                            borderWidth: 1,
                            pointStyle: false,
                            fill: false
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio:false,
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                },
                                title: {
                                    display: true,
                                    text: formatDate(lastLabels),
                                    font:{
                                        weight: 'bold',
                                        family: 'Arial',
                                        size: '16'
                                    },
                                    padding:{
                                        top: 15,
                                        bottom: 25
                                    }
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title:{
                                    display: true,
                                    text: ylabels,
                                    font: {
                                        family: 'Arial',
                                        weight: 'bold'
                                    }
                                }
                            }
                        }
                    }
                });
            } else {
                chartInstance.data.labels = labels;
                chartInstance.data.datasets[0].data = data;
                chartInstance.update();
            }
        }
        setInterval(updateChart, 120000); // Update every 120 seconds
        updateChart(); // Initial call
    </script>
    <br>



